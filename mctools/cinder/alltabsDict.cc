//
// File generated by rootcint at Tue Jul 12 18:34:30 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME alltabsDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "alltabsDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void Nuclide_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Nuclide(void *p = 0);
   static void *newArray_Nuclide(Long_t size, void *p);
   static void delete_Nuclide(void *p);
   static void deleteArray_Nuclide(void *p);
   static void destruct_Nuclide(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Nuclide*)
   {
      ::Nuclide *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Nuclide >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Nuclide", ::Nuclide::Class_Version(), "./Nuclide.hh", 13,
                  typeid(::Nuclide), ::ROOT::DefineBehavior(ptr, ptr),
                  &::Nuclide::Dictionary, isa_proxy, 4,
                  sizeof(::Nuclide) );
      instance.SetNew(&new_Nuclide);
      instance.SetNewArray(&newArray_Nuclide);
      instance.SetDelete(&delete_Nuclide);
      instance.SetDeleteArray(&deleteArray_Nuclide);
      instance.SetDestructor(&destruct_Nuclide);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Nuclide*)
   {
      return GenerateInitInstanceLocal((::Nuclide*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Nuclide*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void Table_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Table(void *p = 0);
   static void *newArray_Table(Long_t size, void *p);
   static void delete_Table(void *p);
   static void deleteArray_Table(void *p);
   static void destruct_Table(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Table*)
   {
      ::Table *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Table >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Table", ::Table::Class_Version(), "./Table.hh", 15,
                  typeid(::Table), ::ROOT::DefineBehavior(ptr, ptr),
                  &::Table::Dictionary, isa_proxy, 4,
                  sizeof(::Table) );
      instance.SetNew(&new_Table);
      instance.SetNewArray(&newArray_Table);
      instance.SetDelete(&delete_Table);
      instance.SetDeleteArray(&deleteArray_Table);
      instance.SetDestructor(&destruct_Table);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Table*)
   {
      return GenerateInitInstanceLocal((::Table*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Table*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr Nuclide::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Nuclide::Class_Name()
{
   return "Nuclide";
}

//______________________________________________________________________________
const char *Nuclide::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Nuclide*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Nuclide::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Nuclide*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Nuclide::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Nuclide*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Nuclide::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Nuclide*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr Table::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Table::Class_Name()
{
   return "Table";
}

//______________________________________________________________________________
const char *Table::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Table*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Table::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Table*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Table::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Table*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Table::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Table*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void Table::Streamer(TBuffer &R__b)
{
   // Stream an object of class Table.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Table::Class(),this);
   } else {
      R__b.WriteClassBuffer(Table::Class(),this);
   }
}

//______________________________________________________________________________
void Table::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Table.
      TClass *R__cl = ::Table::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tableName", (void*)&tableName);
      R__insp.InspectMember("string", (void*)&tableName, "tableName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tableNumber", &tableNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beamStates", (void*)&beamStates);
      R__insp.InspectMember("vector<bool>", (void*)&beamStates, "beamStates.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeSteps", (void*)&timeSteps);
      R__insp.InspectMember("vector<double>", (void*)&timeSteps, "timeSteps.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Nuclides", (void*)&Nuclides);
      R__insp.InspectMember("vector<Nuclide>", (void*)&Nuclides, "Nuclides.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "totalActivity", (void*)&totalActivity);
      R__insp.InspectMember("vector<double>", (void*)&totalActivity, "totalActivity.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_Table(void *p) {
      return  p ? new(p) ::Table : new ::Table;
   }
   static void *newArray_Table(Long_t nElements, void *p) {
      return p ? new(p) ::Table[nElements] : new ::Table[nElements];
   }
   // Wrapper around operator delete
   static void delete_Table(void *p) {
      delete ((::Table*)p);
   }
   static void deleteArray_Table(void *p) {
      delete [] ((::Table*)p);
   }
   static void destruct_Table(void *p) {
      typedef ::Table current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::Table

//______________________________________________________________________________
void Nuclide::Streamer(TBuffer &R__b)
{
   // Stream an object of class Nuclide.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Nuclide::Class(),this);
   } else {
      R__b.WriteClassBuffer(Nuclide::Class(),this);
   }
}

//______________________________________________________________________________
void Nuclide::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Nuclide.
      TClass *R__cl = ::Nuclide::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nuclideName", (void*)&nuclideName);
      R__insp.InspectMember("string", (void*)&nuclideName, "nuclideName.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "halfLife", &halfLife);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isExcited", &isExcited);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "activity", (void*)&activity);
      R__insp.InspectMember("vector<double>", (void*)&activity, "activity.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pActivity", (void*)&pActivity);
      R__insp.InspectMember("vector<double>", (void*)&pActivity, "pActivity.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_Nuclide(void *p) {
      return  p ? new(p) ::Nuclide : new ::Nuclide;
   }
   static void *newArray_Nuclide(Long_t nElements, void *p) {
      return p ? new(p) ::Nuclide[nElements] : new ::Nuclide[nElements];
   }
   // Wrapper around operator delete
   static void delete_Nuclide(void *p) {
      delete ((::Nuclide*)p);
   }
   static void deleteArray_Nuclide(void *p) {
      delete [] ((::Nuclide*)p);
   }
   static void destruct_Nuclide(void *p) {
      typedef ::Nuclide current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::Nuclide

namespace ROOTDict {
   void vectorlENuclidegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlENuclidegR_Dictionary();
   static void *new_vectorlENuclidegR(void *p = 0);
   static void *newArray_vectorlENuclidegR(Long_t size, void *p);
   static void delete_vectorlENuclidegR(void *p);
   static void deleteArray_vectorlENuclidegR(void *p);
   static void destruct_vectorlENuclidegR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<Nuclide>*)
   {
      vector<Nuclide> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<Nuclide>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<Nuclide>", -2, "prec_stl/vector", 49,
                  typeid(vector<Nuclide>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlENuclidegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<Nuclide>) );
      instance.SetNew(&new_vectorlENuclidegR);
      instance.SetNewArray(&newArray_vectorlENuclidegR);
      instance.SetDelete(&delete_vectorlENuclidegR);
      instance.SetDeleteArray(&deleteArray_vectorlENuclidegR);
      instance.SetDestructor(&destruct_vectorlENuclidegR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<Nuclide> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<Nuclide>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlENuclidegR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<Nuclide>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlENuclidegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Nuclide> : new vector<Nuclide>;
   }
   static void *newArray_vectorlENuclidegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Nuclide>[nElements] : new vector<Nuclide>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlENuclidegR(void *p) {
      delete ((vector<Nuclide>*)p);
   }
   static void deleteArray_vectorlENuclidegR(void *p) {
      delete [] ((vector<Nuclide>*)p);
   }
   static void destruct_vectorlENuclidegR(void *p) {
      typedef vector<Nuclide> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<Nuclide>

namespace ROOTDict {
   void vectorlEboolgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEboolgR_Dictionary();
   static void *new_vectorlEboolgR(void *p = 0);
   static void *newArray_vectorlEboolgR(Long_t size, void *p);
   static void delete_vectorlEboolgR(void *p);
   static void deleteArray_vectorlEboolgR(void *p);
   static void destruct_vectorlEboolgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<bool>*)
   {
      vector<bool> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<bool>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<bool>", -2, "vectorbool.dll", 0,
                  typeid(vector<bool>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEboolgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<bool>) );
      instance.SetNew(&new_vectorlEboolgR);
      instance.SetNewArray(&newArray_vectorlEboolgR);
      instance.SetDelete(&delete_vectorlEboolgR);
      instance.SetDeleteArray(&deleteArray_vectorlEboolgR);
      instance.SetDestructor(&destruct_vectorlEboolgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<bool> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<bool>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEboolgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<bool>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEboolgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<bool> : new vector<bool>;
   }
   static void *newArray_vectorlEboolgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<bool>[nElements] : new vector<bool>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEboolgR(void *p) {
      delete ((vector<bool>*)p);
   }
   static void deleteArray_vectorlEboolgR(void *p) {
      delete [] ((vector<bool>*)p);
   }
   static void destruct_vectorlEboolgR(void *p) {
      typedef vector<bool> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<bool>

namespace ROOTDict {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<double>

/********************************************************
* alltabsDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablealltabsDict();

extern "C" void G__set_cpp_environmentalltabsDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("Nuclide.hh");
  G__add_compiledheader("Table.hh");
  G__cpp_reset_tagtablealltabsDict();
}
#include <new>
extern "C" int G__cpp_dllrevalltabsDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Nuclide */
static int G__alltabsDict_168_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Nuclide* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Nuclide(*((string*) G__int(libp->para[0])), (double) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) Nuclide(*((string*) G__int(libp->para[0])), (double) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__alltabsDictLN_Nuclide));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_168_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Nuclide* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Nuclide[n];
     } else {
       p = new((void*) gvp) Nuclide[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Nuclide;
     } else {
       p = new((void*) gvp) Nuclide;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__alltabsDictLN_Nuclide));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_168_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Nuclide*) G__getstructoffset())->setName(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_168_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Nuclide*) G__getstructoffset())->setHalflife((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_168_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Nuclide*) G__getstructoffset())->addActivity((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_168_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((Nuclide*) G__getstructoffset())->getName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_168_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Nuclide*) G__getstructoffset())->getExcited());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_168_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Nuclide*) G__getstructoffset())->getHalflife());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_168_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Nuclide*) G__getstructoffset())->getNActivity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_168_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Nuclide*) G__getstructoffset())->getActivity((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_168_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Nuclide*) G__getstructoffset())->getPActivity((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_168_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<double>* pobj;
         vector<double> xobj = ((Nuclide*) G__getstructoffset())->getActivities();
         pobj = new vector<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_168_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Nuclide*) G__getstructoffset())->trimActivity((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_168_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Nuclide*) G__getstructoffset())->calculatePercent(*((vector<double>*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_168_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Nuclide::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_168_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Nuclide::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_168_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Nuclide::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_168_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Nuclide::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_168_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Nuclide*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_168_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Nuclide::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_168_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Nuclide::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_168_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Nuclide::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_168_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Nuclide::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__alltabsDict_168_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Nuclide* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Nuclide(*(Nuclide*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__alltabsDictLN_Nuclide));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Nuclide G__TNuclide;
static int G__alltabsDict_168_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Nuclide*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Nuclide*) (soff+(sizeof(Nuclide)*i)))->~G__TNuclide();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Nuclide*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Nuclide*) (soff))->~G__TNuclide();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__alltabsDict_168_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Nuclide* dest = (Nuclide*) G__getstructoffset();
   *dest = *(Nuclide*) libp->para[0].ref;
   const Nuclide& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Table */
static int G__alltabsDict_169_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Table* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Table(*((string*) G__int(libp->para[0])), (int) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) Table(*((string*) G__int(libp->para[0])), (int) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__alltabsDictLN_Table));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Table* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Table[n];
     } else {
       p = new((void*) gvp) Table[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Table;
     } else {
       p = new((void*) gvp) Table;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__alltabsDictLN_Table));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Table*) G__getstructoffset())->setName(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Table*) G__getstructoffset())->setNumber((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Table*) G__getstructoffset())->addBeamState((bool) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Table*) G__getstructoffset())->addTimeStep((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Table*) G__getstructoffset())->addNuclide(*((Nuclide*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Table*) G__getstructoffset())->findNuclide(*((string*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Table*) G__getstructoffset())->listNuclides();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Table*) G__getstructoffset())->listNuclides(*((string*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((Table*) G__getstructoffset())->getName();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Table*) G__getstructoffset())->getNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Table*) G__getstructoffset())->getNuclide((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Table*) G__getstructoffset())->getNNuclides());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Table*) G__getstructoffset())->getNBeamStates());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<double>* pobj;
         vector<double> xobj = ((Table*) G__getstructoffset())->getTimeSteps();
         pobj = new vector<double>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<bool>* pobj;
         vector<bool> xobj = ((Table*) G__getstructoffset())->getBeamStates();
         pobj = new vector<bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((Table*) G__getstructoffset())->getMostActive((double) G__double(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((Table*) G__getstructoffset())->getMostActive((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Table*) G__getstructoffset())->finalizeTable();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Table::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Table::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Table::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Table::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Table*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Table::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Table::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Table::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__alltabsDict_169_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Table::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__alltabsDict_169_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Table* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Table(*(Table*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__alltabsDictLN_Table));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Table G__TTable;
static int G__alltabsDict_169_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Table*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Table*) (soff+(sizeof(Table)*i)))->~G__TTable();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Table*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Table*) (soff))->~G__TTable();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__alltabsDict_169_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Table* dest = (Table*) G__getstructoffset();
   *dest = *(Table*) libp->para[0].ref;
   const Table& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Nuclide */

/* Table */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncalltabsDict {
 public:
  G__Sizep2memfuncalltabsDict(): p(&G__Sizep2memfuncalltabsDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncalltabsDict::*p)();
};

size_t G__get_sizep2memfuncalltabsDict()
{
  G__Sizep2memfuncalltabsDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancealltabsDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__alltabsDictLN_Nuclide))) {
     Nuclide *G__Lderived;
     G__Lderived=(Nuclide*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__alltabsDictLN_Nuclide),G__get_linked_tagnum(&G__alltabsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__alltabsDictLN_Table))) {
     Table *G__Lderived;
     G__Lderived=(Table*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__alltabsDictLN_Table),G__get_linked_tagnum(&G__alltabsDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablealltabsDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__alltabsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__alltabsDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__alltabsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__alltabsDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__alltabsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__alltabsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__alltabsDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__alltabsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__alltabsDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__alltabsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Nuclide>",117,G__get_linked_tagnum(&G__alltabsDictLN_vectorlENuclidecOallocatorlENuclidegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__alltabsDictLN_reverse_iteratorlEvectorlENuclidecOallocatorlENuclidegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__alltabsDictLN_vectorlENuclidecOallocatorlENuclidegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__alltabsDictLN_reverse_iteratorlEvectorlENuclidecOallocatorlENuclidegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__alltabsDictLN_vectorlENuclidecOallocatorlENuclidegRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Nuclide */
static void G__setup_memvarNuclide(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__alltabsDictLN_Nuclide));
   { Nuclide *p; p=(Nuclide*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__alltabsDictLN_string),-1,-1,4,"nuclideName=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"halfLife=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"isExcited=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__alltabsDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"activity=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__alltabsDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"pActivity=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__alltabsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Table */
static void G__setup_memvarTable(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__alltabsDictLN_Table));
   { Table *p; p=(Table*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__alltabsDictLN_string),-1,-1,4,"tableName=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"tableNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__alltabsDictLN_vectorlEboolcOallocatorlEboolgRsPgR),G__defined_typename("vector<bool>"),-1,4,"beamStates=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__alltabsDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"timeSteps=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__alltabsDictLN_vectorlENuclidecOallocatorlENuclidegRsPgR),G__defined_typename("vector<Nuclide>"),-1,4,"Nuclides=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__alltabsDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"totalActivity=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__alltabsDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvaralltabsDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncNuclide(void) {
   /* Nuclide */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__alltabsDictLN_Nuclide));
   G__memfunc_setup("Nuclide",708,G__alltabsDict_168_0_1, 105, G__get_linked_tagnum(&G__alltabsDictLN_Nuclide), -1, 0, 2, 1, 1, 0, 
"u 'string' - 0 - - d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Nuclide",708,G__alltabsDict_168_0_2, 105, G__get_linked_tagnum(&G__alltabsDictLN_Nuclide), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setName",717,G__alltabsDict_168_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHalflife",1127,G__alltabsDict_168_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addActivity",1142,G__alltabsDict_168_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getName",705,G__alltabsDict_168_0_6, 117, G__get_linked_tagnum(&G__alltabsDictLN_string), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getExcited",1030,G__alltabsDict_168_0_7, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHalflife",1115,G__alltabsDict_168_0_8, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNActivity",1243,G__alltabsDict_168_0_9, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getActivity",1165,G__alltabsDict_168_0_10, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPActivity",1245,G__alltabsDict_168_0_11, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getActivities",1365,G__alltabsDict_168_0_12, 117, G__get_linked_tagnum(&G__alltabsDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<double>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("trimActivity",1289,G__alltabsDict_168_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calculatePercent",1663,G__alltabsDict_168_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<double,allocator<double> >' 'vector<double>' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setExcited",1042,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__alltabsDict_168_0_16, 85, G__get_linked_tagnum(&G__alltabsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Nuclide::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__alltabsDict_168_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Nuclide::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__alltabsDict_168_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Nuclide::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__alltabsDict_168_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Nuclide::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__alltabsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__alltabsDict_168_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__alltabsDict_168_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Nuclide::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__alltabsDict_168_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Nuclide::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__alltabsDict_168_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Nuclide::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__alltabsDict_168_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Nuclide::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Nuclide", 708, G__alltabsDict_168_0_28, (int) ('i'), G__get_linked_tagnum(&G__alltabsDictLN_Nuclide), -1, 0, 1, 1, 1, 0, "u 'Nuclide' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Nuclide", 834, G__alltabsDict_168_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__alltabsDict_168_0_30, (int) ('u'), G__get_linked_tagnum(&G__alltabsDictLN_Nuclide), -1, 1, 1, 1, 1, 0, "u 'Nuclide' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTable(void) {
   /* Table */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__alltabsDictLN_Table));
   G__memfunc_setup("Table",488,G__alltabsDict_169_0_1, 105, G__get_linked_tagnum(&G__alltabsDictLN_Table), -1, 0, 2, 1, 1, 0, 
"u 'string' - 0 - - i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Table",488,G__alltabsDict_169_0_2, 105, G__get_linked_tagnum(&G__alltabsDictLN_Table), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setName",717,G__alltabsDict_169_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNumber",949,G__alltabsDict_169_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addBeamState",1183,G__alltabsDict_169_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTimeStep",1108,G__alltabsDict_169_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addNuclide",1005,G__alltabsDict_169_0_7, 105, -1, -1, 0, 1, 1, 1, 0, "u 'Nuclide' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findNuclide",1125,G__alltabsDict_169_0_8, 105, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("listNuclides",1267,G__alltabsDict_169_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("listNuclides",1267,G__alltabsDict_169_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getName",705,G__alltabsDict_169_0_11, 117, G__get_linked_tagnum(&G__alltabsDictLN_string), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumber",937,G__alltabsDict_169_0_12, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNuclide",1028,G__alltabsDict_169_0_13, 85, G__get_linked_tagnum(&G__alltabsDictLN_Nuclide), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNNuclides",1221,G__alltabsDict_169_0_14, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNBeamStates",1399,G__alltabsDict_169_0_15, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeSteps",1246,G__alltabsDict_169_0_16, 117, G__get_linked_tagnum(&G__alltabsDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), G__defined_typename("vector<double>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBeamStates",1321,G__alltabsDict_169_0_17, 117, G__get_linked_tagnum(&G__alltabsDictLN_vectorlEboolcOallocatorlEboolgRsPgR), G__defined_typename("vector<bool>"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMostActive",1343,G__alltabsDict_169_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - - i - - 0 '-1' timeStep", "Set the threshold (%) over which the", (void*) NULL, 0);
   G__memfunc_setup("finalizeTable",1338,G__alltabsDict_169_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calculateTotals",1573,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("toPercent",948,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__alltabsDict_169_0_22, 85, G__get_linked_tagnum(&G__alltabsDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Table::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__alltabsDict_169_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Table::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__alltabsDict_169_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Table::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__alltabsDict_169_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Table::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__alltabsDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__alltabsDict_169_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__alltabsDict_169_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Table::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__alltabsDict_169_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Table::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__alltabsDict_169_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Table::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__alltabsDict_169_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Table::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Table", 488, G__alltabsDict_169_0_34, (int) ('i'), G__get_linked_tagnum(&G__alltabsDictLN_Table), -1, 0, 1, 1, 1, 0, "u 'Table' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Table", 614, G__alltabsDict_169_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__alltabsDict_169_0_36, (int) ('u'), G__get_linked_tagnum(&G__alltabsDictLN_Table), -1, 1, 1, 1, 1, 0, "u 'Table' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncalltabsDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalalltabsDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcalltabsDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__alltabsDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__alltabsDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__alltabsDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__alltabsDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__alltabsDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__alltabsDictLN_vectorlEboolcOallocatorlEboolgRsPgR = { "vector<bool,allocator<bool> >" , 99 , -1 };
G__linked_taginfo G__alltabsDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__alltabsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__alltabsDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__alltabsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__alltabsDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__alltabsDictLN_Nuclide = { "Nuclide" , 99 , -1 };
G__linked_taginfo G__alltabsDictLN_Table = { "Table" , 99 , -1 };
G__linked_taginfo G__alltabsDictLN_vectorlENuclidecOallocatorlENuclidegRsPgR = { "vector<Nuclide,allocator<Nuclide> >" , 99 , -1 };
G__linked_taginfo G__alltabsDictLN_reverse_iteratorlEvectorlENuclidecOallocatorlENuclidegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<Nuclide,allocator<Nuclide> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablealltabsDict() {
  G__alltabsDictLN_TClass.tagnum = -1 ;
  G__alltabsDictLN_TBuffer.tagnum = -1 ;
  G__alltabsDictLN_TMemberInspector.tagnum = -1 ;
  G__alltabsDictLN_TObject.tagnum = -1 ;
  G__alltabsDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__alltabsDictLN_vectorlEboolcOallocatorlEboolgRsPgR.tagnum = -1 ;
  G__alltabsDictLN_string.tagnum = -1 ;
  G__alltabsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__alltabsDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__alltabsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__alltabsDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__alltabsDictLN_Nuclide.tagnum = -1 ;
  G__alltabsDictLN_Table.tagnum = -1 ;
  G__alltabsDictLN_vectorlENuclidecOallocatorlENuclidegRsPgR.tagnum = -1 ;
  G__alltabsDictLN_reverse_iteratorlEvectorlENuclidecOallocatorlENuclidegRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablealltabsDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__alltabsDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__alltabsDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__alltabsDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__alltabsDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__alltabsDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__alltabsDictLN_vectorlEboolcOallocatorlEboolgRsPgR);
   G__get_linked_tagnum_fwd(&G__alltabsDictLN_string);
   G__get_linked_tagnum_fwd(&G__alltabsDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__alltabsDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__alltabsDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__alltabsDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__alltabsDictLN_Nuclide),sizeof(Nuclide),-1,324864,(char*)NULL,G__setup_memvarNuclide,G__setup_memfuncNuclide);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__alltabsDictLN_Table),sizeof(Table),-1,324864,(char*)NULL,G__setup_memvarTable,G__setup_memfuncTable);
   G__get_linked_tagnum_fwd(&G__alltabsDictLN_vectorlENuclidecOallocatorlENuclidegRsPgR);
   G__get_linked_tagnum_fwd(&G__alltabsDictLN_reverse_iteratorlEvectorlENuclidecOallocatorlENuclidegRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupalltabsDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupalltabsDict()");
  G__set_cpp_environmentalltabsDict();
  G__cpp_setup_tagtablealltabsDict();

  G__cpp_setup_inheritancealltabsDict();

  G__cpp_setup_typetablealltabsDict();

  G__cpp_setup_memvaralltabsDict();

  G__cpp_setup_memfuncalltabsDict();
  G__cpp_setup_globalalltabsDict();
  G__cpp_setup_funcalltabsDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncalltabsDict();
  return;
}
class G__cpp_setup_initalltabsDict {
  public:
    G__cpp_setup_initalltabsDict() { G__add_setup_func("alltabsDict",(G__incsetup)(&G__cpp_setupalltabsDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initalltabsDict() { G__remove_setup_func("alltabsDict"); }
};
G__cpp_setup_initalltabsDict G__cpp_setup_initializeralltabsDict;

